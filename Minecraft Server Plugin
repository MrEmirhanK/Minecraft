
    /**
     * Constructor
     * 
     * @param aSkyBlock
     */
    public IslandCmd(ASkyBlock aSkyBlock) {
	@@ -162,7 +162,7 @@ public void loadSchematics() {
                }
                // If this is repeated later due to the schematic config, fine, it will only add info
            } else {
                // No islands.schematic in the jar, so just make the default using 
                // built-in island generation
                schematics.put("default",new Schematic(plugin));
            }
	@@ -191,7 +191,7 @@ public void loadSchematics() {
                } catch (IOException e) {
                    plugin.getLogger().severe("Could not load default nether schematic!");
                    e.printStackTrace();
                }  
            } else {
                plugin.getLogger().severe("Could not find default nether schematic!");
            }
	@@ -268,7 +268,7 @@ public void loadSchematics() {
                            plugin.getLogger().severe("Schematic " + key + " does not have a filename. Skipping!");
                        }
                    }
                    if (newSchem != null) {   
                        // Set the heading
                        newSchem.setHeading(key);
                        // Order
	@@ -280,7 +280,7 @@ public void loadSchematics() {
                            Material icon;
                            String iconString = schemSection.getString("schematics." + key + ".icon","MAP").toUpperCase();
                            // Support damage values
                            String[] split = iconString.split(":");  
                            if (StringUtils.isNumeric(split[0])) {
                                icon = Material.getMaterial(Integer.parseInt(split[0]));
                                if (icon == null) {
	@@ -294,12 +294,12 @@ public void loadSchematics() {
                            if (split.length == 2) {
                                if (StringUtils.isNumeric(split[1])) {
                                    damage = Integer.parseInt(split[1]);
                                }  
                            }
                            newSchem.setIcon(icon, damage);
                        } catch (Exception e) {
                            //e.printStackTrace();
                            newSchem.setIcon(Material.MAP); 
                        }
                        // Friendly name
                        String name = ChatColor.translateAlternateColorCodes('&', schemSection.getString("schematics." + key + ".name",""));
	@@ -340,10 +340,10 @@ public void loadSchematics() {
                            plugin.getLogger().severe("Could not parse biome " + biomeString + " using default instead.");
                        }
                        // Use physics - overrides default if it exists
                        newSchem.setUsePhysics(schemSection.getBoolean("schematics." + key + ".usephysics",Settings.usePhysics));	    
                        // Paste Entities or not
                        newSchem.setPasteEntities(schemSection.getBoolean("schematics." + key + ".pasteentities",false));
                        // Paste air or not. 
                        newSchem.setPasteAir(schemSection.getBoolean("schematics." + key + ".pasteair",true));
                        // Visible in GUI or not
                        newSchem.setVisible(schemSection.getBoolean("schematics." + key + ".show",true));
	@@ -485,7 +485,7 @@ public void loadSchematics() {
            if (schematics.isEmpty()) {
                tip();
            }
        } 
    }

    private void tip() {
	@@ -498,7 +498,7 @@ private void tip() {

    /**
     * Adds a player to a team. The player and the teamleader MAY be the same
     * 
     * @param playerUUID - the player's UUID
     * @param teamLeader
     * @return true if the player is successfully added
	@@ -517,7 +517,7 @@ public boolean addPlayertoTeam(final UUID playerUUID, final UUID teamLeader) {
        if (!playerUUID.equals(teamLeader)) {
            // Clear any old home locations
            plugin.getPlayers().clearHomeLocations(playerUUID);
            // Set homes and spawn point home locations if they exist 
            for (Entry<Integer,Location> homes : plugin.getPlayers().getHomeLocations(teamLeader).entrySet()) {
                if (homes.getKey() < 2) {
                    plugin.getPlayers().setHomeLocation(playerUUID, homes.getValue(), homes.getKey());
	@@ -547,7 +547,7 @@ public boolean addPlayertoTeam(final UUID playerUUID, final UUID teamLeader) {

    /**
     * Removes a player from a team run by teamleader
     * 
     * @param playerUUID - the player's UUID
     * @param teamLeader
     * @return true if successful, false if not
	@@ -558,7 +558,7 @@ public boolean removePlayerFromTeam(final UUID playerUUID, final UUID teamLeader

    /**
     * Removes a player from a team run by teamleader
     * 
     * @param playerUUID - the player's UUID
     * @param teamLeader
     * @param makeLeader - true if this is the result of switching leader
	@@ -757,7 +757,7 @@ public void newIsland(final Player player, final Schematic schematic) {
            }
            // Record the rating of this schematic - not used for anything right now
            plugin.getPlayers().setStartIslandRating(playerUUID, schematic.getRating());
        } 
        // Clear the cleanstone flag so events can happen again
        plugin.setNewIsland(false);
        // Add to the grid
	@@ -772,7 +772,7 @@ public void newIsland(final Player player, final Schematic schematic) {
        }
        // Set the custom protection range if appropriate
        // Dynamic island range sizes with permissions
        int range = Settings.islandProtectionRange;        
        for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
            if (perms.getPermission().startsWith(Settings.PERMPREFIX + "island.range.")) {
                if (perms.getPermission().contains(Settings.PERMPREFIX + "island.range.*")) {
	@@ -835,7 +835,7 @@ public void run() {
     * @param schematic
     * @param loc
     * @param player
     * @param reason 
     */
    public void pasteSchematic(final Schematic schematic, final Location loc, final Player player, PasteReason reason) {
        schematic.pasteSchematic(loc, player, false, reason);
	@@ -882,7 +882,7 @@ private Location getNextIsland(UUID playerUUID) {
    /**
     * Finds the next free island spot based off the last known island Uses
     * island_distance setting from the config file Builds up in a grid fashion
     * 
     * @param lastIsland
     * @return Location of next free island
     */
	@@ -917,7 +917,7 @@ private Location nextGridLocation(final Location lastIsland) {

    /**
     * Calculates the island level
     * 
     * @param sender
     *            - Player object of player who is asking
     * @param targetPlayer
	@@ -954,7 +954,7 @@ public boolean calculateIslandLevel(final CommandSender sender, final UUID targe
                Util.sendMessage(asker, ChatColor.GREEN + plugin.myLocale(asker.getUniqueId()).islandislandLevelis.replace("[level]", String.valueOf(plugin.getPlayers().getIslandLevel(targetPlayer))));
            }
        } else {
            // Console request            
            Util.sendMessage(sender, ChatColor.GREEN + plugin.myLocale().levelCalculating);
            new LevelCalcByChunk(plugin, plugin.getGrid().getIsland(targetPlayer), targetPlayer, sender, report);
        }
	@@ -963,7 +963,7 @@ public boolean calculateIslandLevel(final CommandSender sender, final UUID targe

    /**
     * One-to-one relationship, you can return the first matched key
     * 
     * @param map
     * @param value
     * @return key
	@@ -1051,7 +1051,7 @@ public boolean onCommand(final CommandSender sender, final Command command, fina
                // Check if player has resets left
                if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
                    Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
                    return true;  
                }
                // Create new island for player
                Util.sendMessage(player, ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).islandnew);
	@@ -1160,7 +1160,7 @@ public boolean onCommand(final CommandSender sender, final Command command, fina
                return true;
            }
            if (split[0].equalsIgnoreCase("banlist")) {
                if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.ban")) {                   
                    // Show banned players
                    Util.sendMessage(player, ChatColor.GREEN + plugin.myLocale(playerUUID).adminInfoBannedPlayers + ":");
                    List<UUID> bannedList = plugin.getPlayers().getBanList(playerUUID);
	@@ -1177,7 +1177,7 @@ public boolean onCommand(final CommandSender sender, final Command command, fina
                }
                return true;
            } else if (split[0].equalsIgnoreCase("ban")) {
                if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.ban")) {                   
                    // Just show ban help
                    Util.sendMessage(player, plugin.myLocale(playerUUID).helpColor + "/" + label + " ban <player>: " + ChatColor.WHITE + plugin.myLocale(playerUUID).islandhelpBan);
                } else {
	@@ -1206,7 +1206,7 @@ public boolean onCommand(final CommandSender sender, final Command command, fina
                    resetPlayer(player, oldIsland);
                }
                return true;
            } else 
                if (split[0].equalsIgnoreCase("lang")) {
                    if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.lang")) {
                        Util.sendMessage(player, "/" + label + " lang <#>");
	@@ -1264,7 +1264,7 @@ public boolean onCommand(final CommandSender sender, final Command command, fina
                                    plugin.getLogger().info(player.getName() + " expelled " + target.getName() + " from their island when locking.");
                                    // Yes they are
                                    Util.sendMessage(player, ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace("[name]", target.getName()));
                                }                              
                            }
                            Util.sendMessage(player, ChatColor.GREEN + plugin.myLocale(playerUUID).lockLocking);
                            plugin.getMessages().tellOfflineTeam(playerUUID, plugin.myLocale(playerUUID).lockPlayerLocked.replace("[name]", player.getName()));
	@@ -1341,7 +1341,7 @@ public boolean onCommand(final CommandSender sender, final Command command, fina
                        Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
                        return true;
                    }
                    if (player.getWorld().equals(ASkyBlock.getIslandWorld()) || player.getWorld().equals(ASkyBlock.getNetherWorld())) {	
                        if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.minishop")) {
                            if (ControlPanel.miniShop != null) {
                                player.openInventory(ControlPanel.miniShop);
	@@ -1407,7 +1407,7 @@ public boolean onCommand(final CommandSender sender, final Command command, fina
            } else if (split[0].equalsIgnoreCase("restart") || split[0].equalsIgnoreCase("reset")) {
                if (!VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.reset")) {
                    Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
                    return true; 
                }
                // Check this player has an island
                if (!plugin.getPlayers().hasIsland(playerUUID)) {
	@@ -1709,7 +1709,7 @@ public void run() {
                    Island spawn = plugin.getGrid().getSpawn();
                    if (spawn != null && spawn.getSpawnPoint() != null) {
                        l = spawn.getSpawnPoint();
                    }	

                    IslandPreTeleportEvent event = new IslandPreTeleportEvent(player, IslandPreTeleportEvent.Type.SPAWN, l);
                    Bukkit.getPluginManager().callEvent(event);
	@@ -1718,7 +1718,7 @@ public void run() {
                    }

                } else {
                    Util.sendMessage(player, ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);  
                }
                return true;
            } else if (split[0].equalsIgnoreCase("top")) {
	@@ -1783,7 +1783,7 @@ public void run() {
                                if (maxSize < 1) {
                                    maxSize = 1;
                                }
                            } 
                            if (teamMembers.size() < maxSize) {
                                Util.sendMessage(player, ChatColor.GREEN
                                        + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace("[number]", String.valueOf(maxSize - teamMembers.size())));
	@@ -1804,27 +1804,27 @@ public void run() {
                }
            } else if (split[0].equalsIgnoreCase("coopaccept")) {
                // Accept an invite command
                    if (coopInviteList.containsKey(playerUUID)) {
                        // Check if inviter is online
                        Player inviter = plugin.getServer().getPlayer(coopInviteList.get(playerUUID));
                        if (inviter == null || !inviter.isOnline()) {
                            Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
                            coopInviteList.remove(playerUUID);
                            return true;
                        }
                        if (CoopPlay.getInstance().addCoopPlayer(inviter,player)) {
                            // Tell everyone what happened
                            Util.sendMessage(inviter, ChatColor.GREEN + plugin.myLocale(inviter.getUniqueId()).coopSuccess.replace("[name]", player.getName()));
                            Util.sendMessage(player, ChatColor.GREEN + plugin.myLocale(playerUUID).coopMadeYouCoop.replace("[name]", inviter.getName()));
                            // TODO: Give perms if the player is on the coop island
                        }
                        setResetWaitTime(player);
                        // Remove the invite
                        coopInviteList.remove(playerUUID);
                        return true;
                    }
                    Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
                    return true;
            } else if (split[0].equalsIgnoreCase("accept")) {
                // Accept an invite command
                if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "team.join")) {
	@@ -1908,8 +1908,8 @@ public void run() {
            } else if (split[0].equalsIgnoreCase("leave")) {
                // Leave team command
                if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "team.join")) {
                    if (player.getWorld().equals(ASkyBlock.getIslandWorld()) || 
                            (Settings.createNether && Settings.newNether && 
                                    ASkyBlock.getNetherWorld() != null && player.getWorld().equals(ASkyBlock.getNetherWorld()))) {
                        if (plugin.getPlayers().inTeam(playerUUID)) {
                            if (plugin.getPlayers().getTeamLeader(playerUUID) != null && plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
	@@ -1932,7 +1932,7 @@ public void run() {
                                    }

                                }.runTaskLater(plugin, Settings.resetConfirmWait * 20L);
                                return true; 
                            }
                            // Remove from confirmation list
                            leavingPlayers.remove(playerUUID);
	@@ -2017,7 +2017,7 @@ public void run() {
                            if (maxSize < 1) {
                                maxSize = 1;
                            }
                        }  
                        if (teamMembers.size() < maxSize) {
                            Util.sendMessage(player, ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace("[number]", String.valueOf(maxSize - teamMembers.size())));
                        } else {
	@@ -2048,7 +2048,7 @@ public void run() {
             */
        case 2:
            if (split[0].equalsIgnoreCase("controlpanel") || split[0].equalsIgnoreCase("cp")) {
                if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.controlpanel")) {
                    if (split[1].equalsIgnoreCase("on")) {
                        plugin.getPlayers().setControlPanel(playerUUID, true);
                    } else if (split[1].equalsIgnoreCase("off")) {
	@@ -2057,7 +2057,7 @@ public void run() {
                    Util.sendMessage(player, ChatColor.GREEN + plugin.myLocale(playerUUID).generalSuccess);
                    return true;
                } else {
                    Util.sendMessage(player, plugin.myLocale(playerUUID).errorNoPermission);
                    return true;
                }
            } else if (split[0].equalsIgnoreCase("value")) {
	@@ -2120,7 +2120,7 @@ public void run() {
                            } else {
                                Util.sendMessage(player, ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
                                return true;
                            }    
                        }
                    } else if (split[0].equalsIgnoreCase("lang")) {
                        if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.lang")) {
	@@ -2150,13 +2150,13 @@ public void run() {
                                    Util.sendMessage(player, ChatColor.RED + "/" + label + " lang <#>");
                                    displayLocales(player);
                                }
                            }                            
                            return true;
                        } else {
                            Util.sendMessage(player, ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
                            return true;
                        }
                    } else 
                        // Multi home
                        if (split[0].equalsIgnoreCase("go")) {
                            if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
	@@ -2216,7 +2216,7 @@ public void run() {
                                    plugin.getGrid().removeMobs(player.getLocation());
                                }
                            } else {
                                Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission); 
                            }
                            return true;
                        } else if (split[0].equalsIgnoreCase("sethome")) {
	@@ -2322,7 +2322,7 @@ public void run() {
                                                return true;
                                            }
                                        }
                                        if (island != null && island.isLocked() && !player.isOp() && !VaultHelper.checkPerm(player, Settings.PERMPREFIX + "mod.bypasslock") 
                                                && !VaultHelper.checkPerm(player, Settings.PERMPREFIX + "mod.bypassprotect")) {
                                            // Always inform that the island is locked
                                            Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).lockIslandLocked);
	@@ -2333,7 +2333,7 @@ public void run() {
                                            }
                                        }
                                        boolean pvp = false;
                                        if (island != null && ((warpSpot.getWorld().equals(ASkyBlock.getIslandWorld()) && island.getIgsFlag(SettingsFlag.PVP)) 
                                                || (warpSpot.getWorld().equals(ASkyBlock.getNetherWorld()) && island.getIgsFlag(SettingsFlag.NETHER_PVP)))) {
                                            pvp = true;
                                        }
	@@ -2384,7 +2384,7 @@ public void run() {
                                                    player.getWorld().playSound(player.getLocation(), Sound.valueOf("BAT_TAKEOFF"), 1F, 1F);
                                                } else {
                                                    player.getWorld().playSound(player.getLocation(), Sound.ENTITY_BAT_TAKEOFF, 1F, 1F);
                                                }                             
                                            }
                                            return true;
                                        }
	@@ -2423,8 +2423,8 @@ public void run() {
                                Player invitedPlayer = plugin.getServer().getPlayer(split[1]);
                                if (invitedPlayer == null || !player.canSee(invitedPlayer)) {
                                    Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
                                    return true;  
                                }                                
                                final UUID invitedPlayerUUID = invitedPlayer.getUniqueId();
                                // Player issuing the command must have an island
                                if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
	@@ -2475,7 +2475,7 @@ public void run() {
                                                if (maxSize < 1) {
                                                    maxSize = 1;
                                                }
                                            }                            
                                            if (teamMembers.size() < maxSize) {
                                                // If that player already has an invite out
                                                // then retract it.
	@@ -2588,8 +2588,8 @@ public void run() {
                            Player target = plugin.getServer().getPlayer(split[1]);
                            if (target == null || !player.canSee(target)) {
                                Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
                                return true;  
                            }                                
                            final UUID targetPlayerUUID = target.getUniqueId();
                            // Player issuing the command must have an island
                            if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
	@@ -2653,8 +2653,8 @@ public void run() {
                            UUID targetPlayerUUID = plugin.getPlayers().getUUID(split[1]);
                            if (targetPlayerUUID == null) {
                                Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
                                return true;  
                            }                                                            
                            // Target should not be themselves
                            if (targetPlayerUUID.equals(playerUUID)) {
                                Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
	@@ -2665,7 +2665,7 @@ public void run() {
                            if (target != null) {
                                if (!player.canSee(target)) {
                                    Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
                                    return true;  
                                }
                                if (target.isOp() || VaultHelper.checkPerm(target, Settings.PERMPREFIX + "mod.bypassprotect")
                                        || VaultHelper.checkPerm(target, Settings.PERMPREFIX + "mod.bypassexpel")) {
	@@ -2721,8 +2721,8 @@ public void run() {
                            UUID targetPlayerUUID = plugin.getPlayers().getUUID(split[1]);
                            if (targetPlayerUUID == null) {
                                Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
                                return true;  
                            }                                                            
                            // Target should not be themselves
                            if (targetPlayerUUID.equals(playerUUID)) {
                                Util.sendMessage(player, ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
	@@ -2934,16 +2934,16 @@ public void run() {
                                            if (!Settings.kickedKeepInv) {
                                                for (ItemStack i : target.getInventory().getContents()) {
                                                    if (i != null) {
                                                        try { 
                                                            // Fire an event to see if this item should be dropped or not
                                                            // Some plugins may not want items to be dropped
                                                            Item drop = player.getWorld().dropItemNaturally(player.getLocation(), i);
                                                            PlayerDropItemEvent event = new PlayerDropItemEvent(target, drop);
                                                            plugin.getServer().getPluginManager().callEvent(event);                                                        
                                                        } catch (Exception e) {
                                                        }
                                                    }
                                                }                           
                                                // plugin.resetPlayer(target); <- no good if
                                                // reset inventory is false
                                                // Clear their inventory and equipment and set
	@@ -3134,7 +3134,7 @@ private void displayLocales(Player player) {
        TreeMap<Integer,String> langs = new TreeMap<Integer,String>();
        for (ASLocale locale : plugin.getAvailableLocales().values()) {
            if (!locale.getLocaleName().equalsIgnoreCase("locale")) {
                langs.put(locale.getIndex(), locale.getLanguageName() + " (" + locale.getCountryName() + ")"); 
            }
        }
        for (Entry<Integer, String> entry: langs.entrySet()) {
	@@ -3255,7 +3255,7 @@ private void resetPlayer(Player player, Island oldIsland) {
    /**
     * Runs commands when a player resets or leaves a team, etc.
     * Can be run for offline players
     * 
     * @param commands
     * @param offlinePlayer
     */
	@@ -3296,7 +3296,7 @@ public static void runCommands(List<String> commands, OfflinePlayer offlinePlaye

    /**
     * Check time out for island restarting
     * 
     * @param player
     * @return true if the timeout is over
     */
	@@ -3326,7 +3326,7 @@ public boolean onLevelWaitTime(final Player player) {

    /**
     * Sets a timeout for player into the Hashmap resetWaitTime
     * 
     * @param player
     */
    private void setResetWaitTime(final Player player) {
	@@ -3335,7 +3335,7 @@ private void setResetWaitTime(final Player player) {

    /**
     * Sets cool down for the level command
     * 
     * @param player
     */
    private void setLevelWaitTime(final Player player) {
	@@ -3345,7 +3345,7 @@ private void setLevelWaitTime(final Player player) {
    /**
     * Returns how long the player must wait until they can restart their island
     * in seconds
     * 
     * @param player
     * @return how long the player must wait
     */
	@@ -3484,7 +3484,7 @@ public boolean valueLookup(Player player, String[] split)

        switch (args.length) {
        case 0:
        case 1: 
            options.add("help"); //No permission needed.
            //options.add("make"); //Make is currently a private command never accessible to the player
            if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.go")) {
	@@ -3570,12 +3570,12 @@ public boolean valueLookup(Player player, String[] split)
            if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.value")) {
                options.add("value");
            }
            if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.spawn") 
                    && plugin.getGrid() != null && plugin.getGrid().getSpawn() != null) {
                options.add("spawn");
            }
            break;
        case 2: 
            if (args[0].equalsIgnoreCase("make")) {
                options.addAll(schematics.keySet());
            }
	@@ -3638,7 +3638,7 @@ public boolean valueLookup(Player player, String[] split)
                    && args[0].equalsIgnoreCase("expel")) {
                options.addAll(Util.getOnlinePlayerList(player));
            }
            if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "team.kick") 
                    && (args[0].equalsIgnoreCase("kick") || args[0].equalsIgnoreCase("remove"))) {
                for (UUID member : teamMembers) {
                    options.add(plugin.getPlayers().getName(member));
	@@ -3650,7 +3650,7 @@ public boolean valueLookup(Player player, String[] split)
                    options.add(plugin.getPlayers().getName(member));
                }
            }
            if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.controlpanel")
                    && (args[0].equalsIgnoreCase("cp") || args[0].equalsIgnoreCase("controlpanel"))) {
                options.add("on");
                options.add("off");
	@@ -3666,8 +3666,8 @@ public boolean valueLookup(Player player, String[] split)
                }
            }
            if (VaultHelper.checkPerm(player, Settings.PERMPREFIX + "island.ban")
                    && (args[0].equalsIgnoreCase("unban"))) {                
                for (UUID banPlayer: plugin.getPlayers().getBanList(playerUUID)) {                       
                    options.add(plugin.getPlayers().getName(banPlayer));
                }
